//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//
// [Modified by Sandlada & Kai Orion]
//
// Copyright 2025 Sandlada & Kai Orion
// SPDX-License-Identifier: MIT
//

@use 'sass:map';
@use '../../../tokens';
@use '../../../themes';

@mixin styles() {
    $tokens: tokens.md-comp-slider-values();

    @layer mdc-slider {

        @layer variable {
            .slider.variable {
                @each $token, $value in $tokens {
                    --_#{$token}: #{$value};
                }

                --_start-fraction: 0;
                --_end-fraction: 0;
                --_tick-count: 0;
                --_track-gap: 6px;
                --_state-layer-size: 4px;

            }
        }

        @layer base {

            .slider {
                display: inline-flex;
                align-items: center;
                position: relative;
                vertical-align: middle;
                min-inline-size: 200px;
                // note, only the native inputs are interactive.
                pointer-events: none;
                // ensure scrolling is prevented on mobile.
                touch-action: none;
                user-select: none;

                &.disabled,
                &[disabled],
                &:is(.disabled, [disabled]) :is(.handle, .hanleNub, input) {
                    pointer-events: none;
                    cursor: default;
                }


                &:hover,
                &:hover :is(.handle, .hanleNub, input) {
                    cursor: grab;
                }

                &:active,
                &:active :is(.handle, .hanleNub, input) {
                    cursor: grabbing;
                }

                &.extra-small {
                    block-size: var(--_extra-small-active-handle-height);
                }
                &.small {
                    block-size: var(--_small-active-handle-height);
                }
                &.medium {
                    block-size: var(--_medium-active-handle-height);
                }
                &.large {
                    block-size: var(--_large-active-handle-height);
                }
                &.extra-large {
                    block-size: var(--_extra-large-active-handle-height);
                }

                // container for the handle that is inset with padding to be
                // track-sized so that the handle container can be positioned with % only
                // and avoid a Safari issue with not being able to transition values that
                // are calced from different units.
                // TODO remove when https://bugs.webkit.org/show_bug.cgi?id=23775 is
                // addressed.
                & .handleContainerPadded {
                    position: relative;
                    block-size: 100%;
                    inline-size: 100%;
                    padding-inline: calc(var(--_handle-height) / 2);
                }

                & .handleContainerBlock {
                    position: relative;
                    block-size: 100%;
                    inline-size: 100%;
                }

                & .handleContainer {
                    position: absolute;
                    inset-block-start: 0;
                    inset-block-end: 0;
                    inset-inline-start: calc(100% * var(--_start-fraction));
                    inline-size: calc(100% * (var(--_end-fraction) - var(--_start-fraction)));
                }


                & .on-top.is-overlapping {
                    & .label,
                    & .label::before {
                    outline: var(--_with-overlap-handle-outline-color) solid
                        var(--_with-overlap-handle-outline-width);
                    }

                    .handleNub {
                    border: var(--_with-overlap-handle-outline-color) solid
                        var(--_with-overlap-handle-outline-width);
                    }
                }



                // label
                .label {
                    position: absolute;
                    box-sizing: border-box;
                    display: flex;
                    padding: 4px;
                    place-content: center;
                    place-items: center;
                    // border-radius: map.get($_md-sys-shape, 'corner-full');

                    color: var(--_label-text-color);
                    font-family: var(--_label-text-font);
                    font-size: var(--_label-text-size);
                    line-height: var(--_label-text-line-height);
                    font-weight: var(--_label-text-weight);

                    inset-block-end: 100%;
                    min-inline-size: var(--_label-container-height);
                    min-block-size: var(--_label-container-height);
                    background: var(--_label-container-color);
                    // transition: transform map.get($_md-sys-motion, 'duration-short2');
                    // map.get($_md-sys-motion, 'easing-emphasized');
                    transform-origin: center bottom;
                    transform: scale(0);
                }

                // note, `:has` needed only for Safari; it's wrapped in a "forgiving"
                // `:where` since the syntax isn't supported yet in Firefox.
                :host(:focus-within) .label,
                .handleContainer.hover .label,
                :where(:has(input:active)) .label {
                    transform: scale(1);
                }

                .label::before,
                .label::after {
                    position: absolute;
                    display: block;
                    content: '';
                    background: inherit;
                }

                // triangle below label
                .label::before {
                    // Note, sizing carefully estimated to create an ice cream cone shape.
                    $_triangleSize: calc(var(--_label-container-height) / 2);
                    inline-size: $_triangleSize;
                    block-size: $_triangleSize;
                    bottom: calc(var(--_label-container-height) / -10);
                    transform: rotate(45deg);
                }

                // fits inside label and occludes top half of triangle.
                .label::after {
                    inset: 0px;
                    border-radius: inherit;
                }

                // must stack above the label's pseudo-elements.
                .labelContent {
                    z-index: 1;
                }



                // native input styling
                // note, the input is what the user interacts with so it must render and
                // be clickable, but it is visually hidden via opacity: 0 and non-clickable
                // styled ui is shown instead and positioned accordingly.
                & input[type='range'] {
                    opacity: 0;
                    -webkit-tap-highlight-color: transparent;
                    position: absolute;
                    box-sizing: border-box;
                    // needed for firefox
                    height: 100%;
                    width: 100%;
                    margin: 0;
                    background: transparent;
                    cursor: pointer;
                    pointer-events: auto;
                    appearance: none;
                }

                & input[type='range']:focus {
                    outline: none;
                }

                &::-webkit-slider-runnable-track {
                    -webkit-appearance: none;
                }

                &::-moz-range-track {
                    appearance: none;
                }

                &::-moz-range-thumb {
                    appearance: none;
                    inline-size: var(--_handle-width);
                    transform: scaleX(0);
                    opacity: 0;
                    z-index: 2;
                }

                &::-webkit-slider-thumb {
                    -webkit-appearance: none;
                    appearance: none;
                    inline-size: var(--_handle-width);
                    opacity: 0;
                    z-index: 2;
                }

                &.extra-small {
                    ::-webkit-slider-thumb,
                    ::-moz-range-thumb {
                        block-size: var(--_extra-small-active-handle-height);
                    }
                }
                &.small {
                    ::-webkit-slider-thumb,
                    ::-moz-range-thumb {
                        block-size: var(--_small-active-handle-height);
                    }
                }
                &.medium {
                    ::-webkit-slider-thumb,
                    ::-moz-range-thumb {
                        block-size: var(--_medium-active-handle-height);
                    }
                }
                &.large {
                    ::-webkit-slider-thumb,
                    ::-moz-range-thumb {
                        block-size: var(--_large-active-handle-height);
                    }
                }
                &.extra-large {
                    ::-webkit-slider-thumb,
                    ::-moz-range-thumb {
                        block-size: var(--_extra-large-active-handle-height);
                    }
                }

                @include _get-safari-knob-translate('end');
                @include _get-safari-knob-translate('start');

                & .on-top {
                    z-index: 1;
                }

                // Ripple
                & .handle {
                    @include themes.md-comp-ripple-theme((
                        hover-color: var(--_hover-state-layer-color),
                        hover-opacity: var(--_hover-state-layer-opacity),
                        pressed-color: var(--_pressed-state-layer-color),
                        pressed-opacity: var(--_pressed-state-layer-opacity),
                    ));
                }

                md-ripple {
                    border-radius: 50%;
                    height: var(--_state-layer-size);
                    width: var(--_state-layer-size);
                }
            }
        }
    }
}

// Returns a background-image with sized circular ticks of the given color.
@function _get-tick-image($color) {
    @return radial-gradient(
        circle at var(--_stop-indicator-size) center,
        #{$color} 0,
        #{$color} calc(var(--_stop-indicator-size) / 2),
        transparent calc(var(--_stop-indicator-size) / 2)
    );
}

// Webkit on iOS requires _some_ size on the thumb. We want to make this the
// same as --_handle-size but also be centered on the handle.
//
// the layout is similar to this:
// [()---[()===========]----]
//
// where - is the native input and the == is the material track.
// at 0 we want to shift the native knob right (padding + knob-size / 2):
// [----[(())===========]----]
//
// at the end we want to shift the native knob left by the same amount:
// [----[===========(())]----]
//
// Therefore we can do `layout-shift - 2 * `percent-fraction` * `layout-shift`
// and in RTL we want to do the the same * -1
@mixin _get-safari-knob-translate($start-or-end) {
  input.#{$start-or-end}::-webkit-slider-thumb {
    // AKA `layout-shift` in the equations above
    --_track-and-knob-padding: calc(
      (var(--_state-layer-size) - var(--_handle-width)) / 2
    );
    --_x-translate: calc(
      var(--_track-and-knob-padding) - 2 * var(--_#{$start-or-end}-fraction) *
        var(--_track-and-knob-padding)
    );
    transform: translateX(var(--_x-translate));
  }

  input.#{$start-or-end}:dir(rtl)::-webkit-slider-thumb {
    transform: translateX(calc(-1 * var(--_x-translate)));
  }
}

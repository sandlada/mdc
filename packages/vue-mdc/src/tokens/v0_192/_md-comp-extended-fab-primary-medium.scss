//
// Copyright 2023 Google LLC
// SPDX-License-Identifier: Apache-2.0
//
// [Modified by Sandlada & Kai Orion]
//
// @license
// Copyright 2025 Sandlada & Kai Orion
// SPDX-License-Identifier: MIT
//

@use 'sass:map';
@use './md-sys-color';
@use './md-sys-elevation';
@use './md-sys-shape';
@use './md-sys-state';
@use './md-sys-typescale';

$_default: (
    'md-sys-color': md-sys-color.values-light(),
    'md-sys-elevation': md-sys-elevation.values(),
    'md-sys-shape': md-sys-shape.values(),
    'md-sys-state': md-sys-state.values(),
    'md-sys-typescale': md-sys-typescale.values(),
);

@function values($deps: $_default, $exclude-hardcoded-values: false) {
    @return (
        'container-color': map.get($deps, 'md-sys-color', 'primary'),
        'container-elevation': map.get($deps, 'md-sys-elevation', 'level3'),
        'container-height': if($exclude-hardcoded-values, null, 80px),
        'container-shadow-color': map.get($deps, 'md-sys-color', 'shadow'),
        'container-shape': map.get($deps, 'md-sys-shape', 'corner-large-increased'),
        'focus-container-elevation': map.get($deps, 'md-sys-elevation', 'level3'),
        'focus-icon-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'focus-label-text-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'focus-state-layer-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'focus-state-layer-opacity': map.get($deps, 'md-sys-state', 'focus-state-layer-opacity'),
        'hover-container-elevation': map.get($deps, 'md-sys-elevation', 'level4'),
        'hover-icon-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'hover-label-text-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'hover-state-layer-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'hover-state-layer-opacity': map.get($deps, 'md-sys-state', 'hover-state-layer-opacity'),
        'icon-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'icon-size': if($exclude-hardcoded-values, null, 28px),
        'label-text-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'label-text-font': map.get($deps, 'md-sys-typescale', 'title-large-font'),
        'label-text-line-height': map.get($deps, 'md-sys-typescale', 'title-large-line-height'),
        'label-text-size': map.get($deps, 'md-sys-typescale', 'title-large-size'),
        'label-text-tracking': map.get($deps, 'md-sys-typescale', 'title-large-tracking'),
        'label-text-type':
            if(
                $exclude-hardcoded-values,
                null,
                map.get($deps, 'md-sys-typescale', 'title-large-weight') map.get($deps, 'md-sys-typescale', 'title-large-size') #{'/'} map.get($deps, 'md-sys-typescale', 'title-large-line-height') map.get($deps, 'md-sys-typescale', 'title-large-font')
            ),
        'label-text-weight': map.get($deps, 'md-sys-typescale', 'title-large-weight'),
        'lowered-container-elevation': map.get($deps, 'md-sys-elevation', 'level1'),
        'lowered-focus-container-elevation': map.get($deps, 'md-sys-elevation', 'level1'),
        'lowered-hover-container-elevation': map.get($deps, 'md-sys-elevation', 'level2'),
        'lowered-pressed-container-elevation': map.get($deps, 'md-sys-elevation', 'level1'),
        'pressed-container-elevation': map.get($deps, 'md-sys-elevation', 'level3'),
        'pressed-icon-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'pressed-label-text-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'pressed-state-layer-color': map.get($deps, 'md-sys-color', 'on-primary'),
        'pressed-state-layer-opacity': map.get($deps, 'md-sys-state', 'pressed-state-layer-opacity')
    );
}
